name: Lint Rust Source

permissions:
  contents: read
  pull-requests: write
  checks: write

on:
  pull_request:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  rustfmt:
    name: Check Rust Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Run rustfmt
        run: cargo fmt --all --check

  lint:
    name: Run Clippy
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/*
            !target/opencascade-sys
          key: cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
      - name: Load OpenCASCADE Cache
        uses: actions/cache/restore@v4
        with:
          path: |
            target/opencascade-sys/
          key: occt-${{ runner.os }}-stable-${{ hashFiles('crates/opencascade-sys/**') }}
      - name: Run clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: "github-pr-review"
          clippy_flags: "--workspace --tests --benches"
          github_token: ${{ secrets.GITHUB_TOKEN }}

  typos-cli:
    name: Check for typos
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v5
      - name: Install Typos
        uses: taiki-e/install-action@v2
        with:
          tool: typos-cli
      - name: run typos
        run: typos
